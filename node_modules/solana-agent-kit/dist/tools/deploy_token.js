"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy_token = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const send_tx_1 = require("../utils/send_tx");
/**
 * Deploy a new SPL token
 * @param agent SolanaAgentKit instance
 * @param decimals Number of decimals for the token (default: 9)
 * @param initialSupply Initial supply to mint (optional)
 * @returns Object containing token mint address and initial account (if supply was minted)
 */
async function deploy_token(agent, decimals = 9
// initialSupply?: number
) {
    try {
        // Create new token mint
        const lamports = await (0, spl_token_1.getMinimumBalanceForRentExemptAccount)(agent.connection);
        const mint = web3_js_1.Keypair.generate();
        console.log("Mint address: ", mint.publicKey.toString());
        console.log("Agent address: ", agent.wallet_address.toString());
        let account_create_ix = web3_js_1.SystemProgram.createAccount({
            fromPubkey: agent.wallet_address,
            newAccountPubkey: mint.publicKey,
            lamports,
            space: spl_token_1.MINT_SIZE,
            programId: spl_token_1.TOKEN_PROGRAM_ID,
        });
        let create_mint_ix = (0, spl_token_1.createInitializeMint2Instruction)(mint.publicKey, decimals, agent.wallet_address, agent.wallet_address, spl_token_1.TOKEN_PROGRAM_ID);
        let tx = new web3_js_1.Transaction().add(account_create_ix, create_mint_ix);
        let hash = await (0, send_tx_1.sendTx)(agent, tx, [mint]);
        console.log("Transaction hash: ", hash);
        console.log("Token deployed successfully. Mint address: ", mint.publicKey.toString());
        return {
            mint: mint.publicKey,
        };
    }
    catch (error) {
        console.log(error);
        throw new Error(`Token deployment failed: ${error.message}`);
    }
}
exports.deploy_token = deploy_token;
//# sourceMappingURL=deploy_token.js.map