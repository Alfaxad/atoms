"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLendingDetails = exports.lendAsset = void 0;
const web3_js_1 = require("@solana/web3.js");
const send_tx_1 = require("../utils/send_tx");
const constants_1 = require("../constants");
/**
 * Lend tokens for yields using Lulo
 * @param agent SolanaAgentKit instance
 * @param asset Mint address of the token to lend (as supported by Lulo)
 * @param amount Amount to lend (in token decimals)
 * @param LULO_API_KEY Valid API key for Lulo
 * @returns Transaction signature
 */
async function lendAsset(agent, asset, amount, LULO_API_KEY = "") {
    try {
        if (!LULO_API_KEY) {
            throw new Error("Missing Lulo API key");
        }
        const request = {
            owner: agent.wallet.publicKey.toBase58(),
            mintAddress: asset.toBase58(),
            depositAmount: amount.toString(),
        };
        const priorityFees = await (0, send_tx_1.getPriorityFees)(agent.connection);
        const priority = `?priorityFee=${priorityFees.median}`;
        const response = await fetch(`${constants_1.LULO_API}/generate/account/deposit${priority}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "x-wallet-pubkey": agent.wallet.publicKey.toBase58(),
                "x-api-key": LULO_API_KEY,
            },
            body: JSON.stringify(request),
        });
        const { data: { transactionMeta }, } = await response.json();
        const luloTxn = web3_js_1.VersionedTransaction.deserialize(Buffer.from(transactionMeta[0].transaction, "base64"));
        // Sign and send transaction
        luloTxn.sign([agent.wallet]);
        const signature = await agent.connection.sendTransaction(luloTxn);
        return signature;
    }
    catch (error) {
        throw new Error(`Lending failed: ${error.message}`);
    }
}
exports.lendAsset = lendAsset;
/**
 * Fetch lending details for agent
 * @param agent SolanaAgentKit instance
 * @param LULO_API_KEY Valid API key for Lulo
 * @returns Lending account details
 */
async function getLendingDetails(agent, LULO_API_KEY = "") {
    try {
        if (!LULO_API_KEY) {
            throw new Error("Missing Lulo API key");
        }
        const response = await fetch(`${constants_1.LULO_API}/account`, {
            headers: {
                "x-wallet-pubkey": agent.wallet.publicKey.toBase58(),
                "x-api-key": LULO_API_KEY,
            },
        });
        const { data } = await response.json();
        return data;
    }
    catch (error) {
        throw new Error(`Failed to fetch lending details: ${error.message}`);
    }
}
exports.getLendingDetails = getLendingDetails;
//# sourceMappingURL=lend.js.map