"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaAgentKit = void 0;
const web3_js_1 = require("@solana/web3.js");
const bs58_1 = __importDefault(require("bs58"));
const tools_1 = require("../tools");
const constants_1 = require("../constants");
/**
 * Main class for interacting with Solana blockchain
 * Provides a unified interface for token operations, NFT management, and trading
 *
 * @class SolanaAgentKit
 * @property {Connection} connection - Solana RPC connection
 * @property {Keypair} wallet - Wallet keypair for signing transactions
 * @property {PublicKey} wallet_address - Public key of the wallet
 */
class SolanaAgentKit {
    constructor(private_key, rpc_url = "https://api.mainnet-beta.solana.com", openai_api_key) {
        this.connection = new web3_js_1.Connection(rpc_url);
        this.wallet = web3_js_1.Keypair.fromSecretKey(bs58_1.default.decode(private_key));
        this.wallet_address = this.wallet.publicKey;
        this.openai_api_key = openai_api_key;
    }
    // Tool methods
    async requestFaucetFunds() {
        return (0, tools_1.request_faucet_funds)(this);
    }
    async deployToken(decimals = constants_1.DEFAULT_OPTIONS.TOKEN_DECIMALS
    // initialSupply?: number
    ) {
        return (0, tools_1.deploy_token)(this, decimals);
    }
    async deployCollection(options) {
        return (0, tools_1.deploy_collection)(this, options);
    }
    async getBalance(token_address) {
        return (0, tools_1.get_balance)(this, token_address);
    }
    async mintNFT(collectionMint, metadata, recipient) {
        return (0, tools_1.mintCollectionNFT)(this, collectionMint, metadata, recipient);
    }
    async transfer(to, amount, mint) {
        return (0, tools_1.transfer)(this, to, amount, mint);
    }
    async registerDomain(name, spaceKB) {
        return (0, tools_1.registerDomain)(this, name, spaceKB);
    }
    async trade(outputMint, inputAmount, inputMint, slippageBps = constants_1.DEFAULT_OPTIONS.SLIPPAGE_BPS) {
        return (0, tools_1.trade)(this, outputMint, inputAmount, inputMint, slippageBps);
    }
    async launchPumpFunToken(tokenName, tokenTicker, description, imageUrl, options) {
        return (0, tools_1.launchPumpFunToken)(this, tokenName, tokenTicker, description, imageUrl, options);
    }
}
exports.SolanaAgentKit = SolanaAgentKit;
//# sourceMappingURL=index.js.map