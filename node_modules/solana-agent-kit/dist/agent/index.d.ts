import { Connection, Keypair, PublicKey } from "@solana/web3.js";
import { mintCollectionNFT } from "../tools";
import { CollectionOptions, PumpFunTokenOptions } from "../types";
/**
 * Main class for interacting with Solana blockchain
 * Provides a unified interface for token operations, NFT management, and trading
 *
 * @class SolanaAgentKit
 * @property {Connection} connection - Solana RPC connection
 * @property {Keypair} wallet - Wallet keypair for signing transactions
 * @property {PublicKey} wallet_address - Public key of the wallet
 */
export declare class SolanaAgentKit {
    connection: Connection;
    wallet: Keypair;
    wallet_address: PublicKey;
    openai_api_key: string;
    constructor(private_key: string, rpc_url: string | undefined, openai_api_key: string);
    requestFaucetFunds(): Promise<string>;
    deployToken(decimals?: number): Promise<{
        mint: PublicKey;
    }>;
    deployCollection(options: CollectionOptions): Promise<import("../types").CollectionDeployment>;
    getBalance(token_address?: PublicKey): Promise<number | null>;
    mintNFT(collectionMint: PublicKey, metadata: Parameters<typeof mintCollectionNFT>[2], recipient?: PublicKey): Promise<import("../types").MintCollectionNFTResponse>;
    transfer(to: PublicKey, amount: number, mint?: PublicKey): Promise<string>;
    registerDomain(name: string, spaceKB?: number): Promise<string>;
    trade(outputMint: PublicKey, inputAmount: number, inputMint?: PublicKey, slippageBps?: number): Promise<string>;
    launchPumpFunToken(tokenName: string, tokenTicker: string, description: string, imageUrl: string, options?: PumpFunTokenOptions): Promise<{
        signature: string;
        mint: string;
        metadataUri: any;
    }>;
}
//# sourceMappingURL=index.d.ts.map